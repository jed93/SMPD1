> library("MCDA")
> 
> rm(list = ls())
> # ----------------------------------------
> # example 5
> epsilon <- 0.01
> 
> additiveValueFunctionElicitation
function (performanceTable, criteriaMinMax, epsilon, alternativesRanks = NULL, 
    alternativesPreferences = NULL, alternativesIndifferences = NULL, 
    alternativesIDs = NULL, criteriaIDs = NULL) 
{
    if (!((is.matrix(performanceTable) || (is.data.frame(performanceTable))))) 
        stop("wrong performanceTable, should be a matrix or a data frame")
    if (!(is.null(alternativesRanks) || is.vector(alternativesRanks))) 
        stop("alternativesRanks should be a vector")
    if (!(is.null(alternativesPreferences) || is.matrix(alternativesPreferences))) 
        stop("alternativesPreferences should be a matrix")
    if (!(is.null(alternativesIndifferences) || is.matrix(alternativesIndifferences))) 
        stop("alternativesIndifferences should be a matrix")
    if (is.null(alternativesRanks) && is.null(alternativesPreferences) && 
        is.null(alternativesIndifferences)) 
        stop("at least one of alternativesRanks, alternativesPreferences or alternativesIndifferences should not be NULL")
    if (!is.null(alternativesRanks) && (!is.null(alternativesPreferences) | 
        !is.null(alternativesIndifferences))) 
        stop("alternativesRanks and one of alternativesPreferences or alternativesIndifferences cannot be simultaneously not NULL")
    if (!(is.vector(criteriaMinMax))) 
        stop("criteriaMinMax should be a vector")
    if (!(is.null(alternativesIDs) || is.vector(alternativesIDs))) 
        stop("alternativesIDs should be in a vector")
    if (!(is.null(criteriaIDs) || is.vector(criteriaIDs))) 
        stop("criteriaIDs should be in a vector")
    if (!is.null(alternativesIDs)) {
        performanceTable <- performanceTable[alternativesIDs, 
            ]
        if (!is.null(alternativesRanks)) 
            alternativesRanks <- alternativesRanks[alternativesIDs]
        if (!is.null(alternativesPreferences)) {
            tmpIds <- intersect(alternativesPreferences, alternativesIDs)
            tmpMatrix <- c()
            for (i in 1:dim(alternativesPreferences)[1]) {
                if (all(alternativesPreferences[i, ] %in% tmpIds)) 
                  tmpMatrix <- rbind(tmpMatrix, alternativesPreferences[i, 
                    ])
            }
            alternativesPreferences <- tmpMatrix
        }
        if (!is.null(alternativesIndifferences)) {
            tmpIds <- intersect(alternativesIndifferences, alternativesIDs)
            tmpMatrix <- c()
            for (i in 1:dim(alternativesIndifferences)[1]) {
                if (all(alternativesIndifferences[i, ] %in% tmpIds)) 
                  tmpMatrix <- rbind(tmpMatrix, alternativesIndifferences[i, 
                    ])
            }
            alternativesIndifferences <- tmpMatrix
        }
    }
    if (!is.null(criteriaIDs)) {
        criteriaMinMax <- criteriaMinMax[criteriaIDs]
        performanceTable <- performanceTable[, criteriaIDs]
    }
    if (!is.null(alternativesRanks)) {
        reallyActiveAlternatives <- intersect(rownames(performanceTable), 
            names(alternativesRanks))
        if (length(reallyActiveAlternatives) != 0) {
            performanceTable <- performanceTable[reallyActiveAlternatives, 
                ]
            alternativesRanks <- alternativesRanks[reallyActiveAlternatives]
        }
        else {
            stop("alternatives of alternativesRanks are not compatible with those of performanceTable")
        }
    }
    if (!is.null(alternativesPreferences) || !is.null(alternativesIndifferences)) {
        reallyActiveAlternatives <- intersect(rownames(performanceTable), 
            rbind(alternativesPreferences, alternativesIndifferences))
        if (length(reallyActiveAlternatives) != 0) {
            performanceTable <- performanceTable[reallyActiveAlternatives, 
                ]
            if (!is.null(alternativesPreferences)) {
                tmpIds <- intersect(alternativesPreferences, 
                  reallyActiveAlternatives)
                tmpMatrix <- c()
                for (i in 1:dim(alternativesPreferences)[1]) {
                  if (all(alternativesPreferences[i, ] %in% tmpIds)) 
                    tmpMatrix <- rbind(tmpMatrix, alternativesPreferences[i, 
                      ])
                }
                alternativesPreferences <- tmpMatrix
            }
            if (!is.null(alternativesIndifferences)) {
                tmpIds <- intersect(alternativesIndifferences, 
                  reallyActiveAlternatives)
                tmpMatrix <- c()
                for (i in 1:dim(alternativesIndifferences)[1]) {
                  if (all(alternativesIndifferences[i, ] %in% 
                    tmpIds)) 
                    tmpMatrix <- rbind(tmpMatrix, alternativesIndifferences[i, 
                      ])
                }
                alternativesIndifferences <- tmpMatrix
            }
        }
        else {
            stop("alternatives of alternativesPreferences or alternativesIndifferences are not compatible with those of performanceTable")
        }
    }
    if (is.null(dim(performanceTable))) 
        stop("less than 2 criteria or 2 alternatives")
    if (is.null(alternativesRanks) && is.null(alternativesPreferences) && 
        is.null(alternativesIndifferences)) 
        stop("after filtering none of alternativesRanks, alternativesPreferences or alternativesIndifferences is not NULL")
    numCrit <- dim(performanceTable)[2]
    numAlt <- dim(performanceTable)[1]
    criteriaBreakPoints <- list()
    for (i in 1:numCrit) {
        tmp <- c()
        tmp <- unique(performanceTable[, i])
        if (criteriaMinMax[i] == "min") 
            tmp <- sort(tmp, decreasing = TRUE)
        else tmp <- sort(tmp)
        criteriaBreakPoints <- c(criteriaBreakPoints, list(tmp))
    }
    names(criteriaBreakPoints) <- colnames(performanceTable)
    criteriaNumberOfBreakPoints <- c()
    for (i in 1:numCrit) {
        criteriaNumberOfBreakPoints <- c(criteriaNumberOfBreakPoints, 
            length(criteriaBreakPoints[[i]]))
    }
    a <- matrix(0, nrow = numAlt, ncol = (sum(criteriaNumberOfBreakPoints) + 
        numAlt))
    for (n in 1:numAlt) {
        for (m in 1:numCrit) {
            j <- which(performanceTable[n, m] == criteriaBreakPoints[[m]])
            if (m == 1) 
                pos <- j
            else pos <- sum(criteriaNumberOfBreakPoints[1:(m - 
                1)]) + j
            a[n, pos] <- 1
            a[n, dim(a)[2] - numAlt + n] <- 1
        }
    }
    obj <- rep(0, sum(criteriaNumberOfBreakPoints))
    obj <- c(obj, rep(1, numAlt))
    preferenceConstraints <- matrix(nrow = 0, ncol = sum(criteriaNumberOfBreakPoints) + 
        numAlt)
    indifferenceConstraints <- matrix(nrow = 0, ncol = sum(criteriaNumberOfBreakPoints) + 
        numAlt)
    if (!is.null(alternativesRanks)) {
        indexOrder <- c()
        orderedAlternativesRanks <- sort(alternativesRanks)
        tmpRanks1 <- alternativesRanks
        tmpRanks2 <- alternativesRanks
        while (length(orderedAlternativesRanks) != 0) {
            tmpIndex <- which(alternativesRanks == orderedAlternativesRanks[1])
            for (j in 1:length(tmpIndex)) indexOrder <- c(indexOrder, 
                tmpIndex[j])
            orderedAlternativesRanks <- orderedAlternativesRanks[-which(orderedAlternativesRanks == 
                orderedAlternativesRanks[1])]
        }
        for (i in 1:(length(alternativesRanks) - 1)) {
            if (alternativesRanks[indexOrder[i]] == alternativesRanks[indexOrder[i + 
                1]]) {
                indifferenceConstraints <- rbind(indifferenceConstraints, 
                  a[indexOrder[i], ] - a[indexOrder[i + 1], ])
            }
            else {
                preferenceConstraints <- rbind(preferenceConstraints, 
                  a[indexOrder[i], ] - a[indexOrder[i + 1], ])
            }
        }
    }
    if (!is.null(alternativesPreferences)) {
        for (i in 1:dim(alternativesPreferences)[1]) {
            preferenceConstraints <- rbind(preferenceConstraints, 
                a[which(rownames(performanceTable) == alternativesPreferences[i, 
                  1]), ] - a[which(rownames(performanceTable) == 
                  alternativesPreferences[i, 2]), ])
        }
    }
    if (!is.null(alternativesIndifferences)) {
        for (i in 1:dim(alternativesIndifferences)[1]) {
            indifferenceConstraints <- rbind(indifferenceConstraints, 
                a[which(rownames(performanceTable) == alternativesIndifferences[i, 
                  1]), ] - a[which(rownames(performanceTable) == 
                  alternativesIndifferences[i, 2]), ])
        }
    }
    mat <- rbind(preferenceConstraints, indifferenceConstraints)
    rhs <- c()
    if (dim(preferenceConstraints)[1] != 0) {
        for (i in (1:dim(preferenceConstraints)[1])) rhs <- c(rhs, 
            epsilon)
    }
    if (dim(indifferenceConstraints)[1] != 0) {
        for (i in (1:dim(indifferenceConstraints)[1])) rhs <- c(rhs, 
            0)
    }
    dir <- c()
    if (dim(preferenceConstraints)[1] != 0) {
        for (i in (1:dim(preferenceConstraints)[1])) dir <- c(dir, 
            ">=")
    }
    if (dim(indifferenceConstraints)[1] != 0) {
        for (i in (1:dim(indifferenceConstraints)[1])) dir <- c(dir, 
            "==")
    }
    monotonicityConstraints <- matrix(nrow = 0, ncol = sum(criteriaNumberOfBreakPoints) + 
        numAlt)
    for (i in 1:length(criteriaNumberOfBreakPoints)) {
        for (j in 1:(criteriaNumberOfBreakPoints[i] - 1)) {
            tmp <- rep(0, sum(criteriaNumberOfBreakPoints) + 
                numAlt)
            if (i == 1) 
                pos <- j
            else pos <- sum(criteriaNumberOfBreakPoints[1:(i - 
                1)]) + j
            tmp[pos] <- -1
            tmp[pos + 1] <- 1
            monotonicityConstraints <- rbind(monotonicityConstraints, 
                tmp)
        }
    }
    mat <- rbind(mat, monotonicityConstraints)
    for (i in (1:dim(monotonicityConstraints)[1])) dir <- c(dir, 
        ">=")
    for (i in (1:dim(monotonicityConstraints)[1])) rhs <- c(rhs, 
        0)
    tmp <- rep(0, sum(criteriaNumberOfBreakPoints) + numAlt)
    for (i in 1:length(criteriaNumberOfBreakPoints)) {
        if (i == 1) 
            pos <- criteriaNumberOfBreakPoints[i]
        else pos <- sum(criteriaNumberOfBreakPoints[1:(i - 1)]) + 
            criteriaNumberOfBreakPoints[i]
        tmp[pos] <- 1
    }
    mat <- rbind(mat, tmp)
    dir <- c(dir, "==")
    rhs <- c(rhs, 1)
    minValueFunctionsConstraints <- matrix(nrow = 0, ncol = sum(criteriaNumberOfBreakPoints) + 
        numAlt)
    for (i in 1:length(criteriaNumberOfBreakPoints)) {
        tmp <- rep(0, sum(criteriaNumberOfBreakPoints) + numAlt)
        if (i == 1) 
            pos <- i
        else pos <- sum(criteriaNumberOfBreakPoints[1:(i - 1)]) + 
            1
        tmp[pos] <- 1
        minValueFunctionsConstraints <- rbind(minValueFunctionsConstraints, 
            tmp)
    }
    mat <- rbind(mat, minValueFunctionsConstraints)
    for (i in (1:dim(minValueFunctionsConstraints)[1])) dir <- c(dir, 
        "==")
    for (i in (1:dim(minValueFunctionsConstraints)[1])) rhs <- c(rhs, 
        0)
    lpSolution <- Rglpk_solve_LP(obj, mat, dir, rhs)
    valueFunctions <- list()
    for (i in 1:length(criteriaNumberOfBreakPoints)) {
        tmp <- c()
        if (i == 1) 
            pos <- 0
        else pos <- sum(criteriaNumberOfBreakPoints[1:(i - 1)])
        for (j in 1:criteriaNumberOfBreakPoints[i]) {
            tmp <- c(tmp, lpSolution$solution[pos + j])
        }
        tmp <- rbind(criteriaBreakPoints[[i]], tmp)
        colnames(tmp) <- NULL
        rownames(tmp) <- c("x", "y")
        valueFunctions <- c(valueFunctions, list(tmp))
    }
    names(valueFunctions) <- colnames(performanceTable)
    overallValues <- as.vector(t(a[, 1:sum(criteriaNumberOfBreakPoints)] %*% 
        lpSolution$solution[1:sum(criteriaNumberOfBreakPoints)]))
    names(overallValues) <- rownames(performanceTable)
    errorValues <- as.vector(lpSolution$solution[(sum(criteriaNumberOfBreakPoints) + 
        1):length(lpSolution$solution)])
    names(errorValues) <- rownames(performanceTable)
    outRanks <- rank(-overallValues, ties.method = "min")
    if ((numAlt >= 3) && !is.null(alternativesRanks)) 
        tau = cor(alternativesRanks, outRanks, method = "kendall")
    else tau = NULL
    out <- list(optimum = round(lpSolution$optimum, digits = 5), 
        valueFunctions = valueFunctions, overallValues = round(overallValues, 
            digits = 5), ranks = outRanks, errors = round(errorValues, 
            digits = 5), Kendall = tau)
    return(out)
}
<environment: namespace:MCDA>
> 
> # the numeric data table
> numericDataTable <- rbind(
+   c(30, 4.8, 249),
+   c(29, 4.1, 349),
+   c(24, 3.9, 319),
+   c(27, 4.4, 299),
+   c(26, 5.5, 319),
+   c(22, 3.9, 149),
+   c(37, 7.1, 499),
+   c(22, 3.7, 249),
+   c(42, 19.2, 2699),
+   c(10, 11.5, 419),
+   c(7, 2.4, 269),
+   c(41, 7.3, 489),
+   c(21, 2.9, 189),
+   c(20, 4.1, 369),
+   c(30, 4.7, 319),
+   c(32, 2.9, 399),
+   c(24, 5.5, 159),
+   c(24, 5, 199),
+   c(20, 4.3, 269),
+   c(4, 2.3, 159)
+   
+ )
> rownames(numericDataTable) <- c(
+   "HB PC 1030",
+   "Ezetil E32M",
+   "Ezetil E26M",
+   "T30 Electra",
+   "Ezetil E28M",
+   "Ezetil C-C E24",
+   "Ezetil E40M",
+   "T25 Electra",
+   "Ezetil EZC45",
+   "Ezetil COOLCAN 10/12",
+   "Sencor SCM 4700BL",
+   "Gio'Style Shiver 40",
+   "Gio'Style Bravo 25",
+   "Sencor SCM 2025",
+   "Gio'Style GS3+ 30",
+   "Sencor SCM 3033RD",
+   "HB PC 1010",
+   "Sencor SCM 1025",
+   "Ardes AR5I04",
+   "Sencor SCM 3033BL")
> colnames(numericDataTable) <- c(
+   "StorageVolume",
+   "Weight",
+   "Price")
> 
> # ranks of the alternatives
> alternativesRanks <- c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)
> names(alternativesRanks) <- row.names(numericDataTable)
> 
> # criteria to minimise or maximize
> criteriaMinMax <- c("max","min","min")
> names(criteriaMinMax) <- colnames(numericDataTable)
> x <- additiveValueFunctionElicitation(numericDataTable,
+                                     criteriaMinMax, epsilon,
+                                     alternativesRanks = alternativesRanks)
> 
> print(x)
$optimum
[1] 0.65

$valueFunctions
$valueFunctions$StorageVolume
  [,1] [,2] [,3] [,4] [,5]  [,6]  [,7]  [,8]  [,9] [,10] [,11] [,12] [,13] [,14] [,15]
x    4  7.0 10.0 20.0 21.0 22.00 24.00 26.00 27.00 29.00 30.00 32.00 37.00 41.00 42.00
y    0  0.1  0.1  0.1  0.1  0.15  0.19  0.22  0.22  0.22  0.22  0.22  0.52  0.52  0.55

$valueFunctions$Weight
  [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] [,15] [,16]
x 19.2 11.5  7.3  7.1  5.5    5  4.8  4.7 4.40  4.30  4.10  3.90  3.70  2.90  2.40  2.30
y  0.0  0.0  0.0  0.0  0.0    0  0.0  0.0 0.08  0.08  0.13  0.14  0.14  0.14  0.16  0.16

$valueFunctions$Price
  [,1] [,2] [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]  [,10]  [,11]  [,12]  [,13]
x 2699  499  489 419.00 399.00 369.00 349.00 319.00 299.00 269.00 249.00 199.00 189.00
y    0    0    0   0.12   0.12   0.27   0.27   0.27   0.27   0.27   0.27   0.27   0.27
   [,14]  [,15]
x 159.00 149.00
y   0.28   0.29


$overallValues
          HB PC 1030          Ezetil E32M          Ezetil E26M          T30 Electra 
                0.49                 0.62                 0.60                 0.57 
         Ezetil E28M       Ezetil C-C E24          Ezetil E40M          T25 Electra 
                0.49                 0.58                 0.52                 0.56 
        Ezetil EZC45 Ezetil COOLCAN 10/12    Sencor SCM 4700BL  Gio'Style Shiver 40 
                0.55                 0.22                 0.53                 0.52 
  Gio'Style Bravo 25      Sencor SCM 2025    Gio'Style GS3+ 30    Sencor SCM 3033RD 
                0.51                 0.50                 0.49                 0.48 
          HB PC 1010      Sencor SCM 1025         Ardes AR5I04    Sencor SCM 3033BL 
                0.47                 0.46                 0.45                 0.44 

$ranks
          HB PC 1030          Ezetil E32M          Ezetil E26M          T30 Electra 
                  12                    1                    2                    4 
         Ezetil E28M       Ezetil C-C E24          Ezetil E40M          T25 Electra 
                  12                    3                    8                    5 
        Ezetil EZC45 Ezetil COOLCAN 10/12    Sencor SCM 4700BL  Gio'Style Shiver 40 
                   6                   20                    7                    8 
  Gio'Style Bravo 25      Sencor SCM 2025    Gio'Style GS3+ 30    Sencor SCM 3033RD 
                  10                   11                   12                   15 
          HB PC 1010      Sencor SCM 1025         Ardes AR5I04    Sencor SCM 3033BL 
                  16                   17                   18                   19 

$errors
          HB PC 1030          Ezetil E32M          Ezetil E26M          T30 Electra 
                0.14                 0.00                 0.01                 0.03 
         Ezetil E28M       Ezetil C-C E24          Ezetil E40M          T25 Electra 
                0.10                 0.00                 0.05                 0.00 
        Ezetil EZC45 Ezetil COOLCAN 10/12    Sencor SCM 4700BL  Gio'Style Shiver 40 
                0.00                 0.32                 0.00                 0.00 
  Gio'Style Bravo 25      Sencor SCM 2025    Gio'Style GS3+ 30    Sencor SCM 3033RD 
                0.00                 0.00                 0.00                 0.00 
          HB PC 1010      Sencor SCM 1025         Ardes AR5I04    Sencor SCM 3033BL 
                0.00                 0.00                 0.00                 0.00 

$Kendall
[1] 0.638334

